### React_4

### 컴포넌트 생성
- 재사용성을 위한 컴포넌트 생성
- `React`를 사용하여 복잡한 `UI`를 구축하려면 작고 재사용 가능한 컴포넌트 조합 필요
- 코드를 모듈화하고 이해하기 쉬워짐
- 컴포넌트 기반 아키텍처는 코드 재사용뿐만 아니라 역할의 분리와 모듈식 설계 장려
- 이러한 방식으로 복잡하고 확장 가능한 애플리케이션 구축 가능

### React Props
- `React`에서 부모 컴포넌트로부터 자식 컴포넌트로 데이터를 전달하는 방법
- 읽기 전용, 받은 컴포넌트에서 변경이 안됨
- 함수 인수와 유사
- 데이터와 이벤트 핸들러를 컴포넌트 트리를 따라 전달할 수 있도록 도와줌
- 컴포넌트 간의 통신과 데이터 공유를 가능하게 해준다.
- 사용하는 이유
  1. 데이터 흐름 : `React`의 데이터 흐름은 단방향적, 흐름 예측이 가능하고 추적이 쉬워짐, 디버깅 테스트에 유용
  2. 컴포넌트 재사용성 : 컴포넌트 값 하드 코딩 대신, `Props`를 사용하여 동일한 컴포넌트에 다른 데이터를 전달함으로써 컴포넌트를 동적이고 재사용이 가능하게 해준다.
  3. 관심사의 분리 : 독립적이고 캡슐화된 형태가 됨
  4. 컴포넌트 간의 통신 : 데이터 뿐만 아니라 자식 컴포넌트로 전달이 가능함, 자식 컴포넌트가 `props`로 전달받은 함수를 호출하여 부모 컴포넌트에게 통신할 수 있다는 것을 의미